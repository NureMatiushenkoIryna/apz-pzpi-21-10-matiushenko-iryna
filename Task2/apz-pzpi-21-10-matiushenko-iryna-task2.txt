1 ОПИС АРХІТЕКТУРИ СИСТЕМИ


Перед безпосередньої розробкою системи необхідно прийняті критично важливі рішення щодо архітектурних підходів, що будуть застосовані протягом розробки та з яких частин система складатиметься.
Запланована система має складатися з чотирьох компонентів: безпосередньо браузерного та мобільного клієнтів, IoT-пристрою, що являє собою просунутий засіб для заряджання автомобілів, та серверної частини, що буде слугувати джерелом даних для клієнтських частин та смарт-девайсу.
Браузерний застосунок слугуватиме як засобом для звичайним користувачів системи, так і знадобиться її адміністраторам для керування нею.
Мобільний застосунок орієнтований на клієнтів, власників електромобілів, оскільки в ньому вони сможуть керувати своїми машинами та переглядати історію заряджнань.


2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ


Розгортання системи є одним з найважливіших аспектів створення масштабованої та надійної системи, що надаватиме свої послуги на постійній основі. Правильно проведене розгортання забезпечує стійкий розвиток для системи та можливість її розробникам впроваджувати кращий, корисніший функціонал, віддаючи значно більше уваги його якості. Саме то було важливо в першу чергу змоделювати майбутнє розгортання створюваної системи.
В даному випадку, планується розгорнути серверну частину разом із базою даних у хмарі, аби забезпечити безперебійний цілодобовий доступ до них та покращити їх безпеку.
З огляду на вищевикладене, було прийнято розгорнути серверну частину та базу даних у хмарному середовищі для забезпечення безпеки даних та безперебійної роботи ключових частин системи.
Для взаємодії із серверною частиною планується використовувати HTTPS з’єднання, аби забезпечити шифрування даних. Для цього буде отримано SSL-сертифікат.
IoT девайс та мобільний застосунок являють собою програмне забезпечення, що буде встановлено на відповідні пристрої.
Браузерний застосунок являтиме собою зібрані статичні файли, що надсилатимуться клієнту з веб-серверу для подальшої обробки інтерфейсу у браузері користувача.
Для демонстрації складного процесу розгортання системи була створена відповідна діаграма, що наведена у додатку А.1.


3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ


Спираючись на використовувані технології та загальноприйняті підходи, було прийнято рішення використовувати N-рівневу архітектуру. Це дозволить забезпечити якісне розділення коду, велику масштабоаність, конфігурованість, а також спрощує внесення змін до кодової бази, оскільки зміни в одному шарі не мають вимагати зміни функціональності в інших. В даному випадку було виокремлено три шари: шар представлення, шар бізнес-логіки та шар доступу до даних.
Шар доступу до даних маніпулює необробленими даними з бази даних та загалом слугує саме для створення запитів до бази даних, результати яких будуть оброблені у наступному шарі. У проєкті даний шар буде реалізовано за допомогою бібліотеки TypeORM, що пропонує звіт готовий функціонал репозиторіїв для створених сутностей.
Шар бізнес-логіки реалізовано у вигляді класів-сервісів, що містять методи для отримання готових оброблених даних. Цей шар містить більшу частину логіки усього додатку, маніпулює вхідними даними з запиту та даними, що були отримані з шару доступу до даних.
Шар представлення відповідає за обробки запитів до серверу та слугує вхідною точкою до нього. На цьому шарі викликаються відповідні методи сервісів, а також виконуються маніпуляції із об’єктами запитів та відповідей серверу, наприклад встановлюються певні заголовки. У даному проєкті цей шар буде реалізовано за допомогою класів-контролерів, кожен з методів яких є однією, чітко окресленою точкою входу у серверну частиную


4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ


Запланована система має три ролі: звичайний користувач, працівник станції для обслуговування та адміністратор. З огляду на оце, проведемо детальне концептуальне моделювання для розуміння того, який функціонал треба впровадити для тієї чи іншої ролі.
Клієнт має доступ до мобільної частини, у якікй він може обрати активний автомобіль, що буде використовуватися під час заряджання, переглядати історію заряджань та аномальних значень, що були помічені протягом них. Також для нього буде доступний браузерний застосунок, у якому він може керувати своїми запитами на сервісні послуги, а також створювати нові, вказуючи одне зі своїх авто. 
Працівникам потрібно в першу чергу мати доступ до поточних запитів на сервісні послуги для їх станцій. Саме це буде їм надано через веб-застосунок.
Для адміністраторів важливо мати якнайібільше контролю над системою. Для контролю прав користувачів адміністратори матимуть окремий розділ у браузернму ПЗ, як і для керування наявними у системі станціями.
Детальніше вищевикладене було проілюстровано на діаграмі прецедентів, що наведена у додатку А.2.


5 ПОБУДОВА ER-ДІАГРАМИ


Внаслідок детального аналізу предметної області та проведення концептуального моделювання системи, можемо виділити наступні сутності, якими вона буде оперувати:
•	Сутнність «Користувач» –;сутність, що містить дані про обліковий запис користувача, його refresh token і тощо;
•	Сутнність «Автомобіль» – містить інформацію про автомобіль, що належить певному користувачу;
•	Сутнність «Заряджання» – містить інформацію про сесію заряджання, що проводилася на певній станції із певним автомобілем;
•	Сутнність «Станція» – містить інформацію про сервісну станцію для власників електомобілів;
•	Сутнність «Інцидент» – містить інформацію про абнормальне значення, що було помічено протягом певного заряджання автомобіля.
•	Сутнність «Запит на сервісні послуги» – містить дані про сервісні послуги, що були замовлені у певної станції для певного автомобіля. Містить свій статус.
На основі поданих сутностей була сформована ER (Entity Relationship) діаграма, що наведена у додатку А.3


6 СПЕЦИФІКАЦІЯ REST


На основі наявних сутностей наведемо специфікацію REST для створюваною програмної системи.
Автентифікація:
•	POST auth/sign-up – створення нового облікового запису безпосередньо незареєстроваим користувачем;
•	POST auth/sign-in – вхід у обліковий запист за поштою та паролем.
•	POST auth/refresh – здійнсює перевипуск пари токенів для авнетифікація для того, щоб оновити їх, коли термін їх дійсності спливає.
Облікові записи:
•	GET users/ – отримання інформації про обліковий запис користувача за індентифікатором;
•	POST users/:id – отримання інформації про обліковий запис користувача за індентифікатором;
•	GET users/employees – отримання інформації про обліковий запис користувача за індентифікатором;
•	GET users/:id – отримання інформації про обліковий запис користувача за індентифікатором;
•	PATCH users/:id – зміна інформації про обліковий запис користувача за індентифікатором;
•	DELETE users/:id – видалення облікового запису користувача за індентифікатором.
Машини:
•	POST cars/ – створення нового автомобіля для користувача;
•	GET cars/ – отримання усіх автомобілів користувача, що няавні у системі;
•	POST cars/:id/set-active – отримання активного автомобіля користувача, що буде використовуватися під час заряджань. Якщо немає, то повертає null;
•	GET cars/active – отримання поточного активного автомобілю, який обрав користувач;
•	GET cars/:id– Отримання автомобіля за його ідентифікатором;
•	PATCH cars/:id – зміна інформації про певний автомобіль за його унікальним ідентифікатором;
•	DELETE cars/:id – видалення певного автомобіля за його унікальним ідентифікатором.
Заряджання:
•	POST chargings/ – початок нового заряджання по ідентифікатору машини та станції;
•	GET chargings/ –  отримання усіх сесій зарядки користувача;
•	GET chargings/:id – отримання певного заряджання користувача по ідентифікатору заряджання.
•	PATCH chargings/ – редагування певного заряджання.
Станції
•	POST stations/ – створення нової станції;
•	GET stations/ – отримання усіх наявних у системі станцій;
•	GET stations/:id – отримання певної станції по її ідентифікатору;
•	PATCH stations/:id – редагування певної станції по її ідентифікатором;
•	DELETE stations/:id – видалення певної стації, що наявна у системі за її ідентифікатором.
Запити на сервісні послуги
•	POST maintenance-requests/ – створення нового запиту на сервісні послуги;
•	GET maintenance-requests/ – отримання усіх запитів на сервісні послуги. Адміністратор отримує усі запити, користувач – тільки його власні, а працівник тільки ті, що були зроблені до його станції.
•	GET maintenance-requests/:id – отримання певного запиту на сервісні послуги по його ідентифікатору;
•	PATCH maintenance-requests/:id – редагування запиту на сервісні послуги, зокрема статусу;
•	DELETE maintenance-requests/:id – видалення певного запиту на сервісні послуги.
Інциденти
•	POST incidents/ – створення нового інциденту для заряджання;
•	GET incidents/ – отримання усіх інцидентів певного заряджання окремо від заряджання.


7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ


У застосунках, створених за допомогою фреймворку NestJS, зазвичай застосунки розділені на окремі модулі, кожен з яких відповідає за взаємодію із певною сутністю, або за певну окрему бізнес-логіку. Наслідуючи цю практику, пакети створеного проєкту здебільшого представляють собою те, які сутності наявні у ньому. У кореневому пакеті app відбувається конфігурація усіх наявних у застосунку модулів, а також підключення необхідних динамічних модулів з необхідними для них даними.
Серед пакетів для сутностей є наступні: car, charging, incident, user, car, station.
Також присутній пакет auth, що відповідає за автенифікацію на основі JWT-токенів та авторизацію.
Більш того, пакети зазвичай містять підпакети, що містять функціональність, яку зручно використовувати у межах модуля та поза ним. Серед таких:
•	guards – класи, що представляють частину наскрізної функціональність застосунку та керують доступ до певних ресурів;
•	entities – класи-сутності, що стосуются даного модуля;
•	decorators – спеціальні функції, що дозволяють додавати до класів, їх методів та аргументів цих методів певні метадані, а також використовувати механізм Dependency Injection.
Детальніше те, з яких пакетів складається проєкт було відображено на діаграмі пакетів, що наведена у додатку А.4.


ВИСНОВКИ


Результатом виконання даної лабораторної роботи стала серверна частина для програмної системи для обслуговування користувачів електромобілів. Була описана архітектура створеного застосунку, наявні у застосунку ролі та можливості, що доступні їм. Описані зв’язки між сутностями, що були реалізовані, наведені діаграми для детального пояснення структури створеного програмного забезпечення, а також специфікація REST.