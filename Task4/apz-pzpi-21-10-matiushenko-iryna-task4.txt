1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


Перед безпосередньою розробкою програмного продукту важливо провести детальне його детальне концептуальне моделювання.
Браузерний веб-застосунок, що має стати результатом проведеної розробки, має бути доступний для усіх трьох ролей системи: клієнта, працівника сервісу та адміністратора. Першим двом має бути доступна можливість керувати запитами на сервісні послуги, власні, або ж ті, що стосуються відповідної станції у випадку працівника. Для адміністратора ж мають бути також доступні можливості керування правами користувачів, а також наявними у системі станціями.
Тобто застосунок також має підтримувати автентифікацію та авторизацію для того, щоб чітко розрізнювати користувачів за їх ролями та можливостями.
Взявши до уваги усі можливі ролі у застосунку та який функціонал їм доступний була сформована UML  діаграма прецедентів, що наведена у додатку А.1.


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
2.1.	Обґрунтування архітектурних рішень проєкту


Взявши до уваги останні тренди розробки клієнтських застосунків, міркувань підтримуваності, розширюваності та реактивності протягом створення були наслідувані принципи компонентно-орієнтованої архітектури.
Такий підхід дозволить легко перевикористовувати окремі напівзалежні компоненти у створюваному інтерфейсі, створювати спільну логіку та наповнювати застосунок інтерактивним функціоналом із малими витратами по швидкодії за рахунок оновлень лише тих частин, що потребують цього. Більш того, подібний код значно легше тестувати за рахунок ізольованості компонентів.
Застосунок має підтримувати локалізацію. Більш того, має бути можливість простої інтеграції нових перекладів за рахунок додавання нових статичних файлів із ними для відповідних мов.
Взаємодія з сервером відбувається за допомогою HTTP-запитів, що здійснюються до визначених вхідних точок серверної частини. Більша частина стану застосунку залежить від даних, що зберігає та надсилає сервер.
Автентифікація у застосунку базується на access та refresh токенах, що містять у собі інформацію про користувача та мають обмежений термін придатності, за рахунок чого значно зменшуються можливі негативні наслідки при потраплянні токену у руки зловмисників.
Для кращої демонстрації архітектурних рішень, що були прийняті при проєктуванні системи, була створена UML діаграма компонентів, що наведена у додатку А.2.


2.2.	Опис використаних технологій


Основої розробки стала бібліотека ReactJS із використанням мови програмування TypeScript. Дана бібліотека довзоляє створювати швидкі, інтерактивні інтерфейси на основі численних компонентів, що перевикористовуються, застосовуючи декларативний підхід.
Локалізація реалізована за допомогою i18next та react-i18next, а також використовується i18next-http-backend для завантаження перекладів безпосередньо з серверу.
Щоб детальніше продемонструвати залежності системи була створена UML діаграма пакетів, що наведена у додатку А.4.


2.3.	Опис результатів розробки браузерного клієнту


Результатом розробки браузерної клієнтською частини став застосунок, написаний на ReactJS, що дозволяє користувачам програмної системи створювати запити на сервісні послуги для їх машин, працівникам сервісу обробляти ці записи, а адмінстраторам автосервісів керувати доступами користувачів системи до функціоналу та даних, а також керувати станціями.
При вході на сайт, користувач потрапляє на екран входу в обліковий запис. З нього він може також перейти на екран реєстрації, якщо він ще не зареєстрований. Після реєстрації користувач автоматично стає автоматично автентифікований і потрапляє на основну сторінку саме так, як і при звичайному вході в акаунт.
Усього застосунок розбитий на 3 основні вкладки, навігаціями якими здійснюється за допомою відповідних кнопок вгорі сторінок застосунку, а саме «Запити на послуги», «Працівники» та «Станції», а також містить сторінки автентифікації та ресєстрації.
Застосунок локалізований двома мовами: українською та англійською, між якими можна переключатися за допомогою відповідного меню.
Вкладка «Запити на послуги» відповідає за взаємодію із запитами на сервісні послуги, що наявні у системі. Адміністраторам доступні усі наявні запити, у той час як працівникам доступні усі запити, що стосуються саме їх станції, а звичайним користувачам доступні лише їхні. Існуючі запити можна оновлювати, а особливу увагу можна приділити різноманітним статусам запитів, які можна їм надати, аби чітко ідентифікувати їх статус. Наприклад, статуси «оновлено сервісом», «відхилено», «оновлено клієнтом», «прийнято» і тощо.
Вкладка «Працівники» доступна лише адміністраторам. У ній вони можуть керувати існуючими користувачами, редагувати їх особисті дані та призначати нові ролі. При перетворенні користувача на працівника також необхідності призначити йому станцію.
Вкладка «Станції» також доступна лише адмінстраторам. У ній вони можуть керувати наявними у системі станціями, на якій обслуговують автомобілі.
Для детальнішої демонстрації роботи системи була створена діаграма діяльності, що наведена у додатку А.4.


2.4.	Опис результатів тестування частини проекту для вбудованих систем


Для того, щоб забезпечити надійність, зручність та правильність роботи частини браузерного веб-застосунку було проведено його функціональне тестування. Середовищем тестування став браузер Google Chrome. Протягом нього була перевірена ключова функціональність застосунку, безпека даних та взаємодія із сервером.
Згідно з результатами тестування значних недоліків знайдено не було.
 

ВИСНОВКИ


Результатом виконання даної лабораторної роботи став веб-застосунок для програмної системи для обслуговування користувачів електромобілів. Була описана архітектура створеного застосунку, наявні у застосунку ролі користувачів та функціонал, що їм доступний, наведені діаграми для детального пояснення структури створеного програмного забезпечення та шляхів його комунікації з іншими частинами програмної системи.
