1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


Перш ніж розпочати розробку платформи для вбудованих систем, важливо створити концептуальну модель програмного продукту. 
При виборі мікроконтролера, на якому буде базуватися платформа, необхідно врахувати всі вимоги, включаючи ключову можливість підключення до Wi-Fi мережі для взаємодії із сервером. Дуже важливо врахувати саме цей фактор у першу чергу, оскільки робота пристрою безпосередньо пов’язана з обміном даними із серверною частиною.
Контролер має по-перше вимагати у користувача підтвердити свою особистість шляхом автентифікації. Далі, якщо користувач не є адміністратором пропонувати почати зарядання автомобіля. Також він має перевіряти чи обрав користувач активний автомобіль у мобільному застосунку та сповіщати про його відсутність. Протягом заряджання, якщо батарея перевищує певне граничне значення, девайс має записувати в історію сповіщення про перегрівання. При затисканні кнопки заряджання або досягненні максимального рівня заряду, девайс має самостійно закінчувати заряджання, сповіщуючи про це сервер.
Якщо користувач є адміністратором, окрім функціоналу заряджання, він також повинен мати можливість змінювати посилання, за яким IoT-девайс звертається до серверної частини.
У відповідності до вищезазначеного, була розроблена UML діаграма прецедентів у додатку А.1.


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
2.1.	Обґрунтування архітектурних рішень проєкту


При розробці програмного забезпечення длу вбудованих систем було обрано наслідувати принципи монолітної архітектури, з огляду на специфіку та обсяги створюваного проєкту. Таким чином була забезпечена швидка розробка, зважаючи на простоту даного підходу, а також швидкий обмін даними між складовими системи.
Пристрій починає свою роботу з обов’язкового підключення до мережі і не продовжує свою роботу поки воно не буде встановлено, оскільки це є ключем до його роботи. Взаємодія з сервером відбувається за допомогою HTTP-запитів за заздалегідь заданим шляхам. За взаємодію з сервером, як і за решту функціоналу відповідають окремі класи-сервіси.
Для коректної роботи пристрою також вимагається автентифікація, оскільки девайс потребує інформацію про активну машину користувача, аби записувати історію заряджань та аномальних показників.
Для детальнішої демонстрації описаних процесів була мстворена UML діаграма взаємодії у додатку А.2.


2.2.	Опис використаних технологій


Серцем створеного програмного забезпечена стала платформа ESP32, оскільки вона забезпечує найважливіший аспект його роботи – підключення до інтернету. Розробка була проведена за допомогою веб-симулятору Wokwi. В якості мови програмування було використано MicroPython.
Окрім мікроконтролеру були використано додаткові частини, завдяки яким був реалізований безпосередній функціонал. Кнопка відповідає за початок та кінець заряджання. Світлодіод сповіщає про те, чи відбувається заряджання. Потенціометр відповідає за симуляцію підвищення сили струму, що подається при заряджанні, оскільки у симуляторі неможливо задіяти справжні джерела струму.


2.3.	Опис результатів розробки частини проекту для вбудованих систем


Результатом проведеної розробки є програмне забезпечення, інтегроване у систему обслуговування власників електромобілів. Реалізація передбачає використання мікроконтролеу ESP32, як платформи, на які буде працювати створене ПЗ.
Робота з пристрою починається з підключення до мережі та автентифікації користувача для ідентифікації дій, які він може робити із ним, а також отримання даних про активне авто, що надалі буде заряджатися.
Якщо користувач є звичайним клієнтом, то після автентифікації його буде переведено безпосередньо до одного функціоналу, що йому доступний – заряджання автомобілю. Пристрій робить запит на сервер для отримання активного автомобілю користувача, аби коректно записати майбутнє заряджання в історію. Якщо активний автомобіль відсутній, користувачеві буде показано відповідне повідомлення з проханням обрати активний автомобіль та підтвердити продовженя роботи із пристроєм. Як тільки пристрій отримує дані про активний автомобіль він починає заряджати автомобіль. Доступна зміна сили струму, що подається на автомобіль, що відповідно впливатиме на швидкість заряджання, але також може значно підвищити температуру батареї. Кожне зчитування стану заряджання також зчитує температуру батереї та при перегріванні на сервер буде надіслано відповідне сповіщення, що буде збережно в історії поточного заряджання. Заряджання можна закінчити за допомогою відповідної кнопки на пристрої, або зачекавши поки рівень зарядки батареї досягне максимального. При закінченні заряджання, його статус на сервері змінюється на закінчене, а також зберігається кінцевий відсоток зарядки.
Якщо ж користувач не є звичайним клієнтом, а працівником або адміністратором, то при початку роботи із пристроєм йому буде доступна можливість конфігурації взаємодії із сервером. У даному меню користувач може змінити посилання, за яким девайс звертатиметься до нього.
Для детальнішої демонстрації принципу роботи створеного програмного забезпечення для IoT пристрою наведено в UML діаграмі станів у додатку А.3.


2.4.	Опис результатів тестування частини проекту для вбудованих систем


Для того, щоб забезпечити надійність, зручність та правильність роботи частини для вбудованих систем було проведено її функціональне тестування, з використанням веб-симулятора Wokwi. Протягом нього була перевірена ключова функціональність застосунку, безпека даних та взаємодія із сервером.
Згідно з результатами тестування значних недоліків знайдено не було.


ВИСНОВКИ


В результаті виконання лабораторної роботи було успішно створено ПЗ для вбудованих систем, що є частиною програмної системи обслуговування власників електромобілів. Було описано прийняті рішення щодо архітектури системи, використаних технологій, деталі реалізації та проведено її функціональне тестування
